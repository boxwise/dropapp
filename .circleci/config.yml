version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@1.8.4
  cypress: cypress-io/cypress@2.2.0
jobs:
  build:
    docker:
      - image: cimg/php:7.4-browsers
    working_directory: ~/project
    steps:
      - checkout
      - run: |
          php --version
          node --version
      - run: sudo apt-get update
      # dependency needed for gd exentions
      - run: sudo apt-get -y --no-install-recommends install libfontconfig1 libxrender1 libxext6 zlib1g-dev libpng-dev libfreetype6-dev libjpeg8-dev
      - run: sudo apt-get clean && sudo rm -rf /var/lib/apt/lists/*
      # load composer cache
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.lock" }}
      - run: composer install -n
      # run linting (before we generate templates)
      - run: vendor/bin/parallel-lint --exclude vendor .
      # these rules match the ones enabled by default by the "fterrag.vscode-php-cs-fixer" vs code extension
      - run: php vendor/friendsofphp/php-cs-fixer/php-cs-fixer fix . --dry-run --verbose --rules @PhpCsFixer
      # build static assets including templates
      - run: php build.php
      # install again, but with no dev dependencies this time (for deploy)
      - run: composer install -n --optimize-autoloader --no-dev
      # save composer cache
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor
      # save output
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  deploy:
    parameters:
      serviceName:
        type: string
      envVariablePrefix:
        type: string
    docker:
      - image: cimg/php:7.4-browsers
    steps:
      - attach_workspace:
          at: workspace
      - gcp-cli/install
      - run: sudo docker-php-ext-install pdo_mysql
      - run: |
          cd workspace
          # record version
          echo "CircleCI build number:${CIRCLE_BUILD_NUM}
          Git hash: ${CIRCLE_SHA1}
          ${CIRCLE_TAG+Release: ${CIRCLE_TAG}}" > assets/version.txt
          # generate config file
          echo "<?php
            \$settings['version'] = '${CIRCLE_BUILD_NUM}';
            ${CIRCLE_TAG+\$settings['release'] = '${CIRCLE_TAG}';}
            \$settings['db_socket'] = '/cloudsql/${BOXWISE_PRIMARYDB_SOCKET}';
            \$settings['db_database'] = '${<< parameters.envVariablePrefix >>DBNAME}';
            \$settings['db_user'] = '${<< parameters.envVariablePrefix >>DBNAME}';
            \$settings['db_pass'] = '${<< parameters.envVariablePrefix >>DBPASS}';
            \$settings['sendgrid_key'] = '${BOXWISE_SENDGRID}';
            \$settings['sentry_key'] = '${BOXWISE_SENTRY}';
            \$settings['test_pwd'] = '${CYPRESS_TEST_PWD}';
            \$settings['upload_dir'] = '${UPLOAD_DIR}/<< parameters.serviceName >>';
            \$settings['auth0_domain'] = '${<< parameters.envVariablePrefix >>AUTH0_DOMAIN}';
            \$settings['auth0_api_id'] = '${<< parameters.envVariablePrefix >>AUTH0_API_ID}';
            \$settings['auth0_api_domain'] = '${<< parameters.envVariablePrefix >>AUTH0_API_DOMAIN}';
            \$settings['auth0_api_audience'] = '${<< parameters.envVariablePrefix >>AUTH0_API_AUDIENCE}';
            \$settings['auth0_client_id'] = '${<< parameters.envVariablePrefix >>AUTH0_CLIENT_ID}';
            \$settings['auth0_db_connection_id'] = '${<< parameters.envVariablePrefix >>AUTH0_DB_CONNECTION_ID}';
            \$settings['auth0_client_secret'] = '${<< parameters.envVariablePrefix >>AUTH0_CLIENT_SECRET}';
            \$settings['auth0_cookie_secret'] = '${<< parameters.envVariablePrefix >>AUTH0_COOKIE_SECRET}';
            \$settings['auth0_redirect_uri'] = '${<< parameters.envVariablePrefix >>AUTH0_REDIRECT_URI}';
            \$settings['v2_base_url'] = '${<< parameters.envVariablePrefix >>V2_BASE_URL}';
            \$settings['jwt_claim_prefix'] = 'https://www.boxtribute.com';" > library/config.php
          echo "paths:
            migrations: '%%PHINX_CONFIG_DIR%%/db/migrations'
            seeds: '%%PHINX_CONFIG_DIR%%/db/seeds'
          environments:
            default_migration_table: phinxlog
            << parameters.serviceName >>:
                adapter: mysql
                host: 127.0.0.1
                name: ${<< parameters.envVariablePrefix >>DBNAME}
                user: root
                pass: ${BOXWISE_PRIMARYDB_ROOTPASS}
                port: 3306
                charset: utf8
                mysql_attr_init_command: SET SQL_MODE = 'NO_AUTO_VALUE_ON_ZERO'
          version_order: creation" > phinx.yml
          # generate google app engine config for target environment
          sed 's/service: default/service: << parameters.serviceName >>/g' app.yaml > app-<< parameters.serviceName >>.yaml
          if [ << parameters.serviceName >> == production ]; then echo -e "\ninstance_class: F4" >> app-production.yaml; fi;
      - run: |
          # get google credentials
          echo $GOOGLE_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          # download cloud sql proxy to enable db access
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy
      - run:
          command: ./cloud_sql_proxy -instances=${BOXWISE_PRIMARYDB_SOCKET}=tcp:3306
          background: true
      - run: |
          # wait for cloud sql proxy to initialize
          sleep 3s
          cd workspace
          # apply db changes 
          echo "Migrating << parameters.serviceName >> database"
          vendor/bin/phinx migrate -e << parameters.serviceName >>
          # deploy
          gcloud app deploy app-<< parameters.serviceName >>.yaml --version ${CIRCLE_BUILD_NUM}
          gcloud app deploy cron.yaml dispatch.yaml --version ${CIRCLE_BUILD_NUM}
  
  create-sentry-release:
    docker: 
      - image: circleci/node:4.8.2
    steps:
      - checkout
      - run:
          name: Create Sentry Release
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$CIRCLE_TAG
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits --auto $SENTRY_RELEASE
            sentry-cli releases finalize $SENTRY_RELEASE

workflows:
  build-and-deploy:
    jobs:
    - build:
        filters:  # required since `deploy-prod` has tag filters AND requires `build`
          tags:
            only: /^v.*/
    # baseUrl for cypress is set in cypress.json (currently staging.boxtribute.org)
    - cypress/run:
        name: cypress-feature-tests
        yarn: true
        record: true # cypress tests are uploaded to https://dashboard.cypress.io/
        wait-on: 'https://staging.boxtribute.org/assets/img/boxtribute.png'
        no-workspace: true
        spec: cypress/integration/1_feature_tests/*
        requires:
          - deploy-staging
        filters:
          branches:
            only: master
    - cypress/run:
        name: cypress-auth-tests
        executor: cypress/base-14
        yarn: true
        record: true # cypress tests are uploaded to https://dashboard.cypress.io/
        wait-on: 'https://staging.boxtribute.org/assets/img/boxtribute.png'
        no-workspace: true
        spec: cypress/integration/2_auth_tests/*
        requires:
          - deploy-staging
        filters:
          branches:
            only: master
    - deploy:
        name: deploy-staging
        envVariablePrefix: BOXWISE_STAGING_
        serviceName: default
        requires:
          - build
        filters:
          branches:
            only: master
    - deploy:   # this will always run on any commit on production
        name: deploy-demo
        envVariablePrefix: BOXWISE_DEMO_
        serviceName: demo
        requires:
          - build
        filters:
          branches:
            only: production
    - deploy:   # this can only be triggered by a tag
        name: deploy-prod
        envVariablePrefix: BOXWISE_PROD_
        serviceName: production
        requires:
          - build
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - create-sentry-release:
        name: create-sentry-release-for-production
        requires:
          - deploy-prod
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
